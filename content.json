{"meta":{"title":"Code","subtitle":null,"description":null,"author":"liaozan","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"SpringBoot 启动分析","slug":"hello-world","date":"2018-10-31T09:10:07.573Z","updated":"2018-10-31T16:18:42.938Z","comments":true,"path":"2018/10/31/hello-world/","link":"","permalink":"http://yoursite.com/2018/10/31/hello-world/","excerpt":"","text":"众所周知,SpringBoot已经成为最流行的Java开发框架,同时也是SpringCloud微服务的基石,今天就来看看SpringBoot是如何启动的吧!程序启动运行main方法直接调用静态方法启动SpringBoot，传入当前类为参数，作为primaryClass123456789101112131415@RestController@SpringBootApplicationpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;public static ConfigurableApplicationContext run(Class&lt;?&gt;[] primarySources,String[] args) &#123; return new SpringApplication(primarySources).run(args);&#125;public SpringApplication(Class&lt;?&gt;... primarySources) &#123; this(null, primarySources);&#125; 1234567891011121314151617public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) &#123; // 重载的构造方法，resourceLoader 为 null this.resourceLoader = resourceLoader; // 判断传入的 primarySource 是否为空 Assert.notNull(primarySources, \"PrimarySources must not be null\"); // 保存到linkedlist this.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources)); // deduceFromClasspath(),这个方法会判断类路径下是否存在指定的类，从而决定应用程序的类型（reactive、servlet、none） this.webApplicationType = WebApplicationType.deduceFromClasspath(); // getSpringFactoriesInstances(),这个方式是实现 SpringBoot 自动装配的基础,是 Spring 自实现的SPI // 这一步是从类路径下 META-INF/spring.factories 下加载以 ApplicationContextInitializer 为key的全类名，并实例化 setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class)); // 同理，加载并实例化以 ApplicationListener 为key的类 setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class)); // 获取程序当前运行堆栈，看是运行的哪个类的 main 方法，继而保存到上下文 this.mainApplicationClass = deduceMainApplicationClass();&#125; 上文说到getSpringFactoriesInstances()这个方法，那这个方法到底是怎么实现的呢查看方法调用，发现最后实现是在SpringApplication#getSpringFactoriesInstances(Class&lt;T&gt; type,Class&lt;?&gt;[] parameterTypes, Object... args)中贴上代码123456789101112private &lt;T&gt; Collection&lt;T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type,Class&lt;?&gt;[] parameterTypes, Object... args) &#123; // 获取类加载器 ClassLoader classLoader = getClassLoader(); // 最重要的代码在这！最重要的代码在这！最重要的代码在这！重要的事情说三遍！！！ Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader)); // 实例化获取到的类 List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,classLoader, args, names); // 排序 AnnotationAwareOrderComparator.sort(instances); // 最后返回实例化好的对象 return instances;&#125; 让我们来看看SpringFactoriesLoader.loadFactoryNames(type, classLoader)到底干了什么呢？123456789101112131415161718192021222324252627282930313233343536373839404142434445public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) &#123; String factoryClassName = factoryClass.getName(); return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());&#125;private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) &#123; // 先试着从缓存中获取 MultiValueMap&lt;String, String&gt; result = cache.get(classLoader); if (result != null) &#123; return result; &#125; try &#123; // 简化部分逻辑 // classLoader.getResources() 是从类路径下加载资源 // 翻看类成员定义，可以发现 FACTORIES_RESOURCE_LOCATION = \"META-INF/spring.factories\"; Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION); result = new LinkedMultiValueMap&lt;&gt;(); // 迭代获取的资源 while (urls.hasMoreElements()) &#123; URL url = urls.nextElement(); // 用当前url实例化一个UrlResource，表示一个Spring资源 UrlResource resource = new UrlResource(url); // 加载资源到内存中 Properties properties = PropertiesLoaderUtils.loadProperties(resource); // 遍历当前资源的键值对 for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123; // 获取key String factoryClassName = ((String) entry.getKey()).trim(); // StringUtils.commaDelimitedListToStringArray(str) 把传入的字符串按逗号分隔为数组 // 遍历获取key对应的value for (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123; // 加到map中 result.add(factoryClassName, factoryName.trim()); &#125; &#125; &#125; // 最后加入缓存 cache.put(classLoader, result); // 返回结果 return result; &#125; catch (IOException ex) &#123; throw new IllegalArgumentException(\"Unable to load factories from location [\" +FACTORIES_RESOURCE_LOCATION + \"]\", ex); &#125;&#125; 注释已经写的很详细了，这段代码的作用就是从类路径META-INF下加载spring.factories文件，并将其读入内存、解析，最后存入缓存中那这么做有什么用呢？我们看一下spring.factories里到底有什么呢？(代码截取自spring-boot-autoconfigure-2.1.0.RELEASE.jar!/META-INF/spring.factories)1234567891011121314151617181920212223242526# Initializersorg.springframework.context.ApplicationContextInitializer=\\org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\\org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener# Application Listenersorg.springframework.context.ApplicationListener=\\org.springframework.boot.autoconfigure.BackgroundPreinitializer# Auto Configuration Import Listenersorg.springframework.boot.autoconfigure.AutoConfigurationImportListener=\\org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener# Auto Configuration Import Filtersorg.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\\org.springframework.boot.autoconfigure.condition.OnBeanCondition,\\org.springframework.boot.autoconfigure.condition.OnClassCondition,\\org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\省略部分代码...org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration 可以看到刚才代码中出现了刚才获取的getSpringFactoriesInstances(ApplicationContextInitializer.class)它所对应的value:12org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializerorg.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener 不难发现，Spring通过在META-INF/spring.factories里提前定义好需要在应用程序启动期间所需要的组件，如ApplicationContextInitializer、ApplicationListener、AutoConfigurationImportListener以及自动配置的关键EnableAutoConfiguration 1.2 run方法逻辑: 1.2.1: 启动时间记录 StopWatch stopWatch = new StopWatch(); stopWatch.start(); 1.2.2: java.awt.headless(我也不知道有啥用) configureHeadlessProperty(); 1.2.3: 获取所有启动时监听器 SpringApplicationRunListeners listeners = getRunListeners(args); springboot 精髓之一 getSpringFactoriesInstances(SpringApplicationRunListener.class, types, this, args)； 内部构造了一个 SpringApplicationRunListener 对象返回，暴露了一些生命周期方法（starting、environmentPrepared、contextPrepared、contextLoaded、started、running、failed） 1.2.4： 回调SpringApplicationRunListener#starting,调用所有监听器的starting(); 1.2.5: 讲启动参数args保存起来，并传播到下一步的事件（environmentPrepared） ApplicationArguments applicationArguments = new DefaultApplicationArguments(args); 1.2.6： prepareEnvironment a: getOrCreateEnvironment 判断当前web环境servlet还是reactive，返回不同的environment对象 b: configureEnvironment 为environment配置转换器和获取启动环境变量参数，以及命令行参数（具体参数load是在监听器中 ConfigFileApplicationListener） c: configureProfiles 启动环境profiles处理 （AbstractEnvironment#doGetActiveProfiles） 1.2.7 回调 SpringApplicationRunListener#environmentPrepared(environment),调用所有监听器的environmentPrepared(); 1.2.8 configureIgnoreBeanInfo 设置是否忽略bean信息 （spring.beaninfo.ignore） 暂时未知作用 1.2.9 Banner printedBanner = printBanner(environment); 打印banner 1.2.10 context = createApplicationContext(); 判断当前web环境，最后通过反射实例化上下文（ servlet 默认为: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext） 反射创建时，无参构造同时初始化了2个类 - AnnotatedBeanDefinitionReader(this); 注解bean定义读取器 - ClassPathBeanDefinitionScanner(this); 类路径bean定义扫描 1.2.11 exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,new Class[] { ConfigurableApplicationContext.class }, context); 获取异常报告，以便在出异常时报告异常信息 1.2.12 prepareContext(context, environment, listeners, applicationArguments,printedBanner); - context.setEnvironment(environment); - postProcessApplicationContext(context); - 注册 beanNameGenerator、resourceLoader、classLoader、conversionService - applyInitializers - getInitializers()，initializer.initialize(context); - listeners.contextPrepared(context); 回调监听的生命周期方法 - 打印启动信息、profile - 把上下文参数和banner注册到IOC容器 beanFactory.registerSingleton(&quot;springApplicationArguments&quot;, applicationArguments); beanFactory.registerSingleton(&quot;springBootBanner&quot;, printedBanner); - setAllowBeanDefinitionOverriding:是否允许bean定义被覆盖 https://blog.csdn.net/lisongjia123/article/details/52041945 - Set&lt;Object&gt; sources = getAllSources(); 获取所有启动类 - load - 创建一个bean定义注册器,由于AnnotationConfigServletWebServerApplicationContext继承了AbstractApplicationContext。AbstractApplicationContext implements BeanDefinitionRegistry。 - 创建一个bean定义loader - loader.load() - load isComponent-&gt; this.annotatedReader.register(source); - listeners.contextLoaded(context); 1.2.13 refreshContext(context) 刷新上下文，进行bean加载 - ServletWebServerApplicationContext.refresh() -&gt; super.refresh() -&gt; AbstractApplicationContext.refresh(); - prepareRefresh() - initPropertySources 从 environment 里取出 servletContextInitParams 、servletConfigInitParams 进行替换 - validateRequiredProperties 验证必须的参数是否存在，不存在则抛异常 - this.earlyApplicationEvents = new LinkedHashSet&lt;&gt;(); 同时创建一个 linkedhashset 用于保存早期应用程序的事件，以便于后期进行事件补派发 - obtainFreshBeanFactory - cas 设置刷新标志 - 设置序列化id - prepareBeanFactory(beanFactory) - beanFactory.setBeanClassLoader(getClassLoader()); 设置类加载器 - beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader())); 设置表达式解析器 - beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment())); 设置属性编辑注册器，用与参数绑定 - beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this)); 添加一个bean后缀处理器 - 忽略以下接口的aware beanFactory.ignoreDependencyInterface(EnvironmentAware.class); beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class); beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class); beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class); beanFactory.ignoreDependencyInterface(MessageSourceAware.class); beanFactory.ignoreDependencyInterface(ApplicationContextAware.class); - 注册一些不需要再解析的依赖bean beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory); beanFactory.registerResolvableDependency(ResourceLoader.class, this); beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this); beanFactory.registerResolvableDependency(ApplicationContext.class, this); - beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this)); Register early post-processor for detecting inner beans as ApplicationListeners. - 判断是否存在environment、systemProperties、systemEnvironment，不存在，即创建并放入容器 - invokeBeanFactoryPostProcessors(beanFactory); https://www.cnblogs.com/ITtangtang/p/3978349.html#a3 - registerBeanPostProcessors(beanFactory); https://www.cnblogs.com/ITtangtang/p/3978349.html#a3 - initMessageSource 判断容器内是否有 messageSource 的bean存在，名字必须为 messageSource ，没有则new一个放入 - initApplicationEventMulticaster(); 初始化事件处理器 - 先判断容器内是否存在 applicationEventMulticaster 名字的bean 同上，必须名字为 applicationEventMulticaster，不存在则new一个 SimpleApplicationEventMulticaster 放入容器 (可以手动往容器里注入一个 SimpleApplicationEventMulticaster，然后调用 setTaskExecutor 传入一个线程池，让spring 事件传播使用线程池，而不是占用请求线程) - onRefresh ServletWebServerApplicationContext.onRefresh 先调用父类，再调用自身的方法 createWebServer 创建web容器 - createWebServer - 先获取servlet上下文 - 获取web容器工厂( 有tomcat、jetty、undertow) - 通过工厂方法获取 webServer - 以 tomcat 为例 TomcatServletWebServerFactory - factory.getWebServer(getSelfInitializer()); -- getSelfInitializer 返回的是一个lambda表达式，只返回了一个匿名对象， - getWebServer(ServletContextInitializer... initializers) - Tomcat tomcat = new Tomcat(); - customizeConnector(connector); 此处可实现 WebServerFactoryCustomizer 自定义servlet容器 - prepareContext addDefaultServlet 默认为true，即设置一个默认的servlet，用于处理静态资源 - shouldRegisterJspServlet tomcat 当类路径下存在org.apache.jasper.servlet.JspServlet类时，容器默认注册jsp处理器用于编译jsp， - context.addLifecycleListener(new StaticResourceConfigurer(context)); 用于处理jar包里的资源 - configureContext 配置tomcat上下文，new 一个 containerInitializer 用于回调 contextInitializer (tomcat容器结构 Container -&gt; Engine -&gt; Host -&gt; Context &gt; Wrapper) 同时把参数设置到上下文，最后回调用户自定义的 customizer - getTomcatWebServer(tomcat) 创建一个TomcatWebServer，同时指定端口，根据端口是否大于0来决定是否自动启动tomcat - initialize() - this.tomcat.start(); - server.start(); - startDaemonAwaitThread(); 启动一个非守护线程保证应用程序启动后不会停止 (方法名daemon，实际不是daemon线程，只是一个后台常驻的线程，监听shutdown事件，接收中断) - getSelfInitializer - prepareWebApplicationContext,把当前上下文对象存入servlet上下文，servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this); - 创建一个scope，包含 request、session、application 域，注册scope (如果不在web环境下，向容器注册 request、session、application 的scope的bean 则会报错) 同时添加自动注入参数对用的ObjectFactory，方便后期注入 servlet 参数 - 注册 servletContext、servletConfig、contextParameters、contextAttributes 到容器 - 触发 ServletContextInitializer 的 onStartUp方法 (自定义的servlet、filter、listener等等在此初始化) - initPropertySources() 同 73 行 - registerListeners() // 添加事件监听，getApplicationListeners 此处获取的listener 是配在 META-INF/spring.factories 中的，以及在启动过程中，spring手动添加的 listener for (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) { getApplicationEventMulticaster().addApplicationListener(listener); } // 包含注解 @EventListener 和 以及通过factoryBean返回的实现了 ApplicationListener接口的类 // tip:事件监听可以实现 GenericApplicationListener，可以设置支持的事件类型,具体逻辑在 AbstractApplicationEventMulticaster#getApplicationListeners retrieveApplicationListeners supportsEvent String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false); for (String listenerBeanName : listenerBeanNames) { getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName); } // 发布在事件多播器还没初始化时发布的事件 if (earlyEventsToProcess != null) { for (ApplicationEvent earlyEvent : earlyEventsToProcess) { getApplicationEventMulticaster().multicastEvent(earlyEvent); } } - finishBeanFactoryInitialization - beanFactory.setConversionService，设置 conversionService - 注册 valueResolver (StringValueResolver 用于解析 ${} 类型的占位符 源码 PropertySourcesPlaceholdersResolver ) - preInstantiateSingletons() 提前实例化单例对象 - 取出容器中所有已经注册的beanDefinition，判断是否为抽象类、单例、并且不是懒加载 如果以上条件满足 判断是否为factotyBean 是: 判断bean是否需要急切的初始化, 是: init 否: nothing happend 否: getBean进行实例化，并实例化其依赖的bean - 回调所有bean后置处理的afterSingletonsInstantiated方法 - finishRefresh - super.finishRefresh - clearResourceCaches 清除资源缓存 - initLifecycleProcessor 初始化生命周期处理器 - getLifecycleProcessor().onRefresh(); 回调生命周期bean的onRefresh，生命周期功能类似 applicationListener，分别在应用程序启动，暂停，停止等阶段回调用户代码 - publishEvent(new ContextRefreshedEvent(this)); 发布事件，上下文已刷新完成、单例bean已经实例化完成、监听器已就位、postProcessor也已经执行完了 - LiveBeansView.registerApplicationContext(this); - startWebServer 启动 tomcat 容器 - publishEvent(new ServletWebServerInitializedEvent(webServer, this)); 发布事件，servlet上下文容器已经初始化\\ - registerShutdownHook 注册关闭钩子函数 1.2.14 afterRefresh 空实现，可以在启动springboot应用的时候，构造一个 SpringApplicationBuilder 自定义重写 1.2.15 stopWatch.stop() 启动计时停止 1.2.16 打印启动耗时等信息 1.2.17 listeners.started(context) 回调监听器的 started方法 1.2.18 callRunners(context, applicationArguments) 获取实现了 ApplicationRunner、CommandLineRunner 的bean 执行run方法，可以用于在容器启动后加载配置文件等其他需求 1.2.19 listeners.running(context) 回调监听器的 started方法","categories":[],"tags":[]}]}